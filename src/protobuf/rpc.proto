enum req_type {
	EMPTY	 	= 0;
	CT_CREATE	= 1;
	CT_OPEN		= 2;

	CT_DESTROY	= 10;

	CT_GET_STATE	= 11;
	CT_SPAWN	= 12;
	CT_ENTER	= 13;
	CT_KILL		= 14;
	CT_WAIT		= 15;

	CT_SETNSMASK	= 16;
	CT_ADD_CNTL	= 17;
	CT_CFG_CNTL	= 18;

	FS_SETROOT	= 19;
	FS_SETPRIVATE	= 20;
	FS_ADD_MOUNT	= 21;
	FS_DEL_MOUNT	= 22;

	CT_SET_OPTION	= 23;
	CT_NET_ADD	= 24;
	CT_NET_DEL	= 25;
	CT_UNAME	= 26;
	CT_SET_CAPS	= 27;
}

message create_req {
	required string	name		= 1;
}

message execv_req {
	required string path		= 1;
	repeated string args		= 2;
	repeated string env		= 3;
	optional bool	pipes		= 4;
}

message nsmask_req {
	required uint64 mask		= 1;
}

message addcntl_req {
	required uint32 ctype		= 1;
}

message cfgcntl_req {
	required uint32	ctype		= 1;
	required string param		= 2;
	required string	value		= 3;
}

message setroot_req {
	required string root		= 1;
}

message setpriv_req {
	required int32	type		= 1;
	optional string	path		= 2;
}

message setoption_req {
	required int32	opt		= 1;
	optional string	cg_path		= 2;
}

message netadd_req {
	required int32	type		= 1;
	optional string	nicname		= 2;
	optional string	peername	= 3;
}

message mount_req {
	required string dst		= 1;
	optional string src		= 2;
	optional int32	flags		= 3;
}

message uname_req {
	optional string host		= 1;
	optional string domain		= 2;
}

message caps_req {
	required uint32	apply_to	= 1;
	required uint64	mask		= 2;
}

message create_resp {
	required uint64	rid		= 1;
}

message state_resp {
	required uint32 state		= 1;
}

message execv_resp {
	required int32 pid		= 1;
}

message rpc_request {
	required req_type	req	= 1;
	optional uint64		ct_rid	= 2;

	optional create_req	create	= 3;
	optional execv_req	execv	= 4;
	optional nsmask_req	nsmask	= 5;
	optional addcntl_req	addcntl	= 6;
	optional cfgcntl_req	cfgcntl	= 7;
	optional setroot_req	setroot	= 8;
	optional setpriv_req	setpriv	= 9;
	optional setoption_req	setopt	= 10;
	optional netadd_req	netadd	= 11;
	optional mount_req	mnt	= 12;
	optional uname_req	uname	= 13;
	optional caps_req	caps	= 14;

	required uint64		req_id	= 15;
}

message rpc_response {
	required bool		success	= 1;
	optional int32		error	= 2;

	optional create_resp	create	= 3;
	optional state_resp	state	= 4;
	optional execv_resp	execv	= 5;

	required uint64		req_id	= 6;
}
